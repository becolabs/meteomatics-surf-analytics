#!/usr/bin/env python3
"""
================================================================================
METEOMATICS ETL AUTOMATION PIPELINE
================================================================================

Script principal para automa√ß√£o completa do pipeline ETL:
1. Extra√ß√£o de dados (Bronze layer)
2. Transforma√ß√£o dbt (Silver layer) 
3. Modelagem Star Schema (Gold layer)
4. Cria√ß√£o de Data Marts especializados

Uso:
    python run_full_etl.py [--config CONFIG_PATH] [--skip-bronze] [--skip-dbt]
    
Exemplos:
    python run_full_etl.py                           # Pipeline completo
    python run_full_etl.py --skip-bronze             # S√≥ dbt (silver/gold/marts)
    python run_full_etl.py --config custom.yaml      # Config customizado

Autor: Meteomatics Team
Data: 2025-08-20
"""

import os
import sys
import yaml
import argparse
import logging
import subprocess
from datetime import datetime
from pathlib import Path
import pandas as pd

# ================================================================================
# CONFIGURA√á√ÉO DE LOGGING
# ================================================================================

def setup_logging():
    """Configura logging para o pipeline"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler(f'logs/etl_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger('meteomatics_etl')

# ================================================================================
# CONFIGURA√á√ÉO E VALIDA√á√ÉO
# ================================================================================

def load_config(config_path: str = 'config/config.yaml') -> dict:
    """Carrega e valida arquivo de configura√ß√£o"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        logger.info(f"‚úÖ Configura√ß√£o carregada: {config_path}")
        logger.info(f"üìä Projeto: {config['project']['name']} v{config['project']['version']}")
        
        return config
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        sys.exit(1)

def validate_environment():
    """Valida se o ambiente est√° configurado corretamente"""
    logger.info("üîç Validando ambiente...")
    
    # Verificar se est√° no venv
    if 'VIRTUAL_ENV' not in os.environ:
        logger.warning("‚ö†Ô∏è  Virtual environment n√£o detectado")
    
    # Verificar estrutura de diret√≥rios
    required_dirs = ['data', 'config', 'dbt_meteomatics', 'logs']
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            logger.info(f"üìÅ Criando diret√≥rio: {dir_name}")
            os.makedirs(dir_name, exist_ok=True)
    
    # Verificar dbt
    try:
        result = subprocess.run(['dbt', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ dbt instalado e funcionando")
        else:
            logger.error("‚ùå dbt n√£o est√° funcionando corretamente")
            sys.exit(1)
    except FileNotFoundError:
        logger.error("‚ùå dbt n√£o encontrado. Instale com: pip install dbt-duckdb")
        sys.exit(1)

# ================================================================================
# ETAPAS DO PIPELINE
# ================================================================================

def run_bronze_extraction(config: dict) -> bool:
    """Executa extra√ß√£o de dados para camada Bronze"""
    logger.info("ü•â INICIANDO CAMADA BRONZE")
    logger.info("=" * 50)
    
    try:
        # Executar pipeline bronze existente
        result = subprocess.run([
            'python', 'pipelines/run_bronze_pipeline.py'
        ], capture_output=True, text=True, cwd='.')
        
        if result.returncode == 0:
            logger.info("‚úÖ Camada Bronze executada com sucesso")
            return True
        else:
            logger.error(f"‚ùå Erro na camada Bronze: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar camada Bronze: {e}")
        return False

def run_dbt_pipeline(config: dict) -> bool:
    """Executa pipeline dbt (Silver + Gold)"""
    logger.info("ü•àü•á INICIANDO PIPELINE DBT")
    logger.info("=" * 50)
    
    try:
        dbt_dir = config['dbt']['project_dir']
        profiles_dir = config['dbt']['profiles_dir']
        
        # Debug dbt
        logger.info("üîç Verificando configura√ß√£o dbt...")
        debug_result = subprocess.run([
            'dbt', 'debug', '--profiles-dir', profiles_dir
        ], capture_output=True, text=True, cwd=dbt_dir)
        
        if debug_result.returncode != 0:
            logger.error(f"‚ùå dbt debug falhou: {debug_result.stderr}")
            return False
        
        # Executar modelos dbt
        logger.info("üöÄ Executando modelos dbt...")
        run_result = subprocess.run([
            'dbt', 'run', '--profiles-dir', profiles_dir
        ], capture_output=True, text=True, cwd=dbt_dir)
        
        if run_result.returncode == 0:
            logger.info("‚úÖ Pipeline dbt executado com sucesso")
            logger.info(f"üìä Output: {run_result.stdout}")
            return True
        else:
            logger.error(f"‚ùå Erro no pipeline dbt: {run_result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar pipeline dbt: {e}")
        return False

def run_dbt_tests(config: dict) -> bool:
    """Executa testes de qualidade dbt"""
    logger.info("üß™ EXECUTANDO TESTES DE QUALIDADE")
    logger.info("=" * 30)
    
    try:
        dbt_dir = config['dbt']['project_dir'] 
        profiles_dir = config['dbt']['profiles_dir']
        
        test_result = subprocess.run([
            'dbt', 'test', '--profiles-dir', profiles_dir
        ], capture_output=True, text=True, cwd=dbt_dir)
        
        if test_result.returncode == 0:
            logger.info("‚úÖ Todos os testes passaram")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è  Alguns testes falharam: {test_result.stdout}")
            return True  # Continuar mesmo com falhas nos testes
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Erro ao executar testes: {e}")
        return True  # Continuar mesmo com erro nos testes

def generate_data_summary(config: dict) -> bool:
    """Gera resumo dos dados processados"""
    logger.info("üìä GERANDO RESUMO DOS DADOS")
    logger.info("=" * 30)
    
    try:
        import duckdb
        
        conn = duckdb.connect('data/dbt_meteomatics.duckdb')
        
        # Contar registros por tabela
        tables = conn.execute("SHOW TABLES").fetchall()
        
        summary = {
            'silver_tables': {},
            'gold_tables': {},
            'total_records': 0
        }
        
        for table_tuple in tables:
            table = table_tuple[0]
            count = conn.execute(f"SELECT COUNT(*) FROM {table}").fetchone()[0]
            summary['total_records'] += count
            
            if table.startswith('stg_'):
                summary['silver_tables'][table] = count
            elif table.startswith('dim_') or table.startswith('fact_'):
                summary['gold_tables'][table] = count
        
        # Log do resumo
        logger.info(f"üìã RESUMO FINAL:")
        logger.info(f"   ü•à Silver: {len(summary['silver_tables'])} tabelas")
        for table, count in summary['silver_tables'].items():
            logger.info(f"      ‚úÖ {table}: {count:,} registros")
            
        logger.info(f"   ü•á Gold: {len(summary['gold_tables'])} tabelas") 
        for table, count in summary['gold_tables'].items():
            logger.info(f"      ‚úÖ {table}: {count:,} registros")
            
        logger.info(f"   üìä Total: {summary['total_records']:,} registros processados")
        
        # Salvar resumo em arquivo
        with open(f'logs/pipeline_summary_{datetime.now().strftime("%Y%m%d_%H%M%S")}.yaml', 'w') as f:
            yaml.dump(summary, f)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar resumo: {e}")
        return False

# ================================================================================
# FUN√á√ÉO PRINCIPAL
# ================================================================================

def main():
    """Fun√ß√£o principal do pipeline ETL"""
    
    # Configurar argumentos da linha de comando
    parser = argparse.ArgumentParser(
        description='Pipeline ETL automatizado Meteomatics',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python run_full_etl.py                     # Pipeline completo
  python run_full_etl.py --skip-bronze       # Pular extra√ß√£o bronze  
  python run_full_etl.py --skip-dbt          # S√≥ executar bronze
  python run_full_etl.py --config custom.yaml # Config customizado
        """
    )
    
    parser.add_argument(
        '--config', 
        default='config/config.yaml',
        help='Caminho para arquivo de configura√ß√£o (default: config/config.yaml)'
    )
    
    parser.add_argument(
        '--skip-bronze',
        action='store_true', 
        help='Pular extra√ß√£o da camada bronze'
    )
    
    parser.add_argument(
        '--skip-dbt',
        action='store_true',
        help='Pular execu√ß√£o do pipeline dbt' 
    )
    
    parser.add_argument(
        '--skip-tests',
        action='store_true',
        help='Pular testes de qualidade'
    )
    
    args = parser.parse_args()
    
    # Configurar logging
    global logger
    logger = setup_logging()
    
    # Banner inicial
    logger.info("üåä" * 20)
    logger.info("üåä METEOMATICS ETL PIPELINE AUTOMATION üåä") 
    logger.info("üåä" * 20)
    logger.info(f"‚è∞ In√≠cio: {datetime.now()}")
    
    # Carregar configura√ß√£o
    config = load_config(args.config)
    
    # Validar ambiente
    validate_environment()
    
    # Executar pipeline
    success = True
    start_time = datetime.now()
    
    try:
        # 1. Camada Bronze (Extra√ß√£o)
        if not args.skip_bronze:
            bronze_success = run_bronze_extraction(config)
            success = success and bronze_success
        else:
            logger.info("‚è≠Ô∏è  Pulando camada Bronze")
        
        # 2. Pipeline dbt (Silver + Gold)
        if not args.skip_dbt and success:
            dbt_success = run_dbt_pipeline(config)
            success = success and dbt_success
        else:
            if args.skip_dbt:
                logger.info("‚è≠Ô∏è  Pulando pipeline dbt")
        
        # 3. Testes de qualidade
        if not args.skip_tests and success:
            run_dbt_tests(config)
        else:
            if args.skip_tests:
                logger.info("‚è≠Ô∏è  Pulando testes")
        
        # 4. Resumo final
        if success:
            generate_data_summary(config)
        
    except KeyboardInterrupt:
        logger.warning("üõë Pipeline interrompido pelo usu√°rio")
        success = False
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        success = False
    
    # Resultado final
    end_time = datetime.now()
    duration = end_time - start_time
    
    logger.info("üåä" * 20)
    if success:
        logger.info("üéâ PIPELINE EXECUTADO COM SUCESSO!")
    else:
        logger.error("‚ùå PIPELINE FALHOU")
    
    logger.info(f"‚è±Ô∏è  Dura√ß√£o: {duration}")
    logger.info(f"üèÅ Fim: {end_time}")
    logger.info("üåä" * 20)
    
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())
